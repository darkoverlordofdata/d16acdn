{
  "name": "expirable",
  "version": "0.0.5",
  "description": "Expirable cache",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": "",
  "keywords": [
    "cache",
    "expire",
    "expires",
    "expirable",
    "store",
    "storage",
    "cows",
    "moo",
    "nodejs",
    "cached",
    "cacher",
    "caching",
    "expiring",
    "expiree"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "1.4.x",
    "chai": "1.2.x"
  },
  "readme": "# Expirable\n\nAutomatic expiring \"cache\" for Node.js. There must be tons of modules like\nthese, but I couldn't find anyone that suites my needs. Just something simple\nbut useful enought to transformed in to a module. Oh and the syntax is pretty as\nwell <3\n\n## API\n\n```js\nvar Expirable = require('expirable');\n\n// all the keys you stuff in to the cache are saved for 5 minutes.\nvar cache = new Expirable('5 minutes');\n\n// add a new item to the cache, expires in 5 minutes, as that is what we\nconfigured above\ncache.set('key', value);\n\n// add item to the cache, but for 10 minutes.\ncache.set('key', value, '10 minutes');\n\n// get item from the cache, this will automatically update the internal last\n// used value, so it will be expired after 5 minutes, without any interaction\nvalue = cache.get('key');\n\n// same as above, except it will not touch the internal last used value and it\n// will expire 5 minutes after you have set it\nvalue = cache.get('key', true);\n\n// check if a value exists\ncache.has('key') ? 'yes' : 'no';\n\n// remove a key from the cache.\ncache.remove('key');\n\n// chen a key is removed from the cache it will emit an event for it. This is\n// useful when you want to re-cache an item again when it expires.\ncache.on('key::removed', function (expired) {\n  // The expired boolean tells you if the key was removed because it was expired\n  // or if it was a manual removal\n});\n\n// update the expiree of a key\ncache.expire('key', '10 seconds');\ncache.expire('kex'); // alias for cache.remove, as it expired directly\n\n// stop the interal setinterval that scan for out of date keys\ncache.stop();\n\n// start it again.\ncache.start();\n\n// kill everything, nuke that motherfucker.\ncache.destroy();\n\n// OH so you want to store the output of a Stream? sure!\nvar stream = cache.stream('key', fs.createReadStream(..), '10 seconds');\n\n// stream is the result of fs.createReadStream\n// once the stream fires it's `done` event, we will store the data.\n\n// iterate over the cache\ncache.forEach(function (key, value) {\n  console.log(key, value);\n});\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "expirable@0.0.5",
  "_from": "expirable@0.0.x"
}
